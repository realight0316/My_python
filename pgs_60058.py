# 프로그래머스 : 괄호 변환 (https://programmers.co.kr/learn/courses/30/lessons/60058)

# 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
# 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, 
#    v는 빈 문자열이 될 수 있습니다. 
# 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
#   3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
# 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
#   4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
#   4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
#   4-3. ')'를 다시 붙입니다. 
#   4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
#   4-5. 생성된 문자열을 반환합니다.

# "균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return

# p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
# 문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
# 만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return 하면 됩니다.

p = "(()())()"
answer = "(()())()"

# p = ")("
# result = "()"

# p = "()))((()"
# result = "()(())()"

# 기본 알고리즘은 본문에서 주어졌고 이것을 구현

def uandv(str):
    check = True        # 올바른 괄호 문자열 확인
    l, r = 0, 0         # 현재 문자열의 (와 )의 수
    lstack = []         # ( 스택
    
    for i in range(len(str)):       # 주어진 문자열 앞번부터 순회
        if str[i] == '(':           # ( 일때
            l += 1                  # 갯수세기
            lstack.append('(')      # 스택 누적
        else:                       # ) 일때
            r += 1                  # 갯수세기
            if len(lstack) == 0:    # 누적이 없으면 올바르지 않은 문자열
                check = False
            else:                   # 누적있으면 스택 하나 빼기
                lstack.pop()
    
        if l == r:                  # 좌우괄호 갯수가 같을 때 최소크기의 u,v분리
            return i+1, check       # 분리할 인덱스와 올바른지 여부
    return 0, False                 # 분리할수없는 문자열


def solution(p):
    if len(p) == 0:         # 1번
        return ''
    
    i, check = uandv(p)     # 2번 / u와 v분리할 인덱스 찾고, 올바른 괄호 문자열인지도 확인
    u = p[:i]
    v = p[i:]

    if check:                   # 3번 / 올바른 문자열의 경우
        return u + solution(v)  # 3-1번 / 이어 붙인뒤 리턴
    
    answer = '(' + solution(v) + ')'    # 4-1번, 4-2번, 4-3번 / 앞뒤에 (랑 )붙이고 재귀로 수행
    for ii in range(1, len(u)-1):       # 4-4번 / 뒤집어서 뒤에 붙여준다
        if u[ii] == '(':
            answer += ')'
        else:
            answer += '('

    return answer               # 4-5번

result = solution(p)
print(f"{answer} / {result}")