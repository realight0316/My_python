# 프로그래머스 : 합승 택시 요금 (https://programmers.co.kr/learn/courses/30/lessons/72413)

# 이미지 확인해서 문제 이해 필요

# [문제]
# 지점의 개수 n, 출발지점을 나타내는 s, A의 도착지점을 나타내는 a, B의 도착지점을 나타내는 b, 
# 지점 사이의 예상 택시요금을 나타내는 fares가 매개변수로 주어집니다. 
# 이때, A, B 두 사람이 s에서 출발해서 각각의 도착 지점까지 택시를 타고 간다고 가정할 때, 
# 최저 예상 택시요금을 계산해서 return 하도록 solution 함수를 완성해 주세요.
# 만약, 아예 합승을 하지 않고 각자 이동하는 경우의 예상 택시요금이 더 낮다면, 합승을 하지 않아도 됩니다.

# [제한사항]
# 지점갯수 n은 3 이상 200 이하인 자연수입니다.
# 지점 s, a, b는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
# 즉, 출발지점, A의 도착지점, B의 도착지점은 서로 겹치지 않습니다.
# fares는 2차원 정수 배열입니다.
# fares 배열의 크기는 2 이상 n x (n-1) / 2 이하입니다.
# 예를들어, n = 6이라면 fares 배열의 크기는 2 이상 15 이하입니다. (6 x 5 / 2 = 15)
# fares 배열의 각 행은 [c, d, f] 형태입니다.
# c지점과 d지점 사이의 예상 택시요금이 f원이라는 뜻입니다.
# 지점 c, d는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
# 요금 f는 1 이상 100,000 이하인 자연수입니다.
# fares 배열에 두 지점 간 예상 택시요금은 1개만 주어집니다. 즉, [c, d, f]가 있다면 [d, c, f]는 주어지지 않습니다.
# 출발지점 s에서 도착지점 a와 b로 가는 경로가 존재하는 경우만 입력으로 주어집니다.

# n=6
# s=4
# a=6
# b=2
# fares= [[4, 1, 10], [3, 5, 24], [5, 6, 2], [3, 1, 41], [5, 1, 24], [4, 6, 50], [2, 4, 66], [2, 3, 22], [1, 6, 25]]
# answer= 82

n=7
s=3
a=4
b=1
fares=[[5, 7, 9], [4, 6, 4], [3, 6, 1], [3, 2, 3], [2, 1, 6]]
answer=14

#  n=6
#  s=4
#  a=5
#  b=6
#  fares=[[2,6,6], [6,3,7], [4,6,7], [6,5,11], [2,5,12], [5,3,20], [2,4,8], [4,3,9]]
#  answer=18

# 지점별 최저이동비용을 테이블에 정리한 뒤에 최종적으로 A 와B의 도착지를 고려하여 이동비용 산출
def solution(n, s, a, b, fares):
    answer = int(1e9)               # 최소 비용 계산을 위해 최댓값으로 삽입
    table = [[int(1e9)] * n for _ in range(n)]

    for i in range(n):
            table[i][i] = 0         # 출발지와 도착지가 동일하면 비용 0

    for i in fares:
        table[i[0]-1][i[1]-1] = table[i[1]-1][i[0]-1] = i[2]
                                    # 방향은 관계없이 이동 비용은 같으므로 한번에 저장
    
    
    for H in range(n):              # 합승지점
        for S in range(n):          # 출발지
            for E in range(S, n):   # 도착지
                if S != E:          # 출발지, 도착지 동일하지 않은 경우
                    table[S][E] = table[E][S] = min(table[S][E], table[S][H]+table[H][E])
                                    # 합승없이 바로 도달 / 출발지-합승-도착지 : 두 값중 최저비용으로 저장
    

    for t in range(n):                                                  # 정리된 테이블값을 토대로
        temp = table[s - 1][t] + table[t][b - 1] + table[t][a - 1]      # 시작지점-합승지점-A와B 목적지까지의 최저비용
        answer = min(answer, temp)

    for yaho in table:              # 테이블 확인용
        print(yaho)

    return answer

results = solution(n, s, a, b, fares)
print(f"{answer} / {results}")