# 백준 : RGB거리 (https://www.acmicpc.net/problem/1149)

# 문제
# RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

# 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 
# 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 
# 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

# 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
# N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

# 입력
# 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 
# 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 
# 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

# 출력
# 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

# 예제 입력1 -> 96
# 3
# 26 40 83
# 49 60 57
# 13 89 99

# 예제 입력2 -> 3
# 3
# 1 100 100
# 100 1 100
# 100 100 1

# 예제 입력3 -> 253
# 8
# 71 39 44
# 32 83 55
# 51 37 63
# 89 29 100
# 83 58 11
# 65 13 15
# 47 25 29
# 60 66 19

import sys

N = int(sys.stdin.readline())
RGB = list()

for _ in range(N):
    RGB.append(list(map(int, sys.stdin.readline().split())))    # RGB비용 리스트 저장

for n in range(1, N):
    RGB[n][0] = min(RGB[n-1][1], RGB[n-1][2]) + RGB[n][0]       # R의 경우 이전 단계에서 G,B중에 최저가를 선택
    RGB[n][1] = min(RGB[n-1][0], RGB[n-1][2]) + RGB[n][1]       # G의 경우 이전 단계에서 R,B중에 최저가를 선택
    RGB[n][2] = min(RGB[n-1][0], RGB[n-1][1]) + RGB[n][2]       # B의 경우 이전 단계에서 R,G중에 최저가를 선택
                                                                # 규칙을 만족하는 모든 경우의 최저가가 들어감
print(min(RGB[N-1]))                                            # 리스트는 0부터 시작하므로 -1

