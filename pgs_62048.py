# 프로그래머스 : 멀쩡한 사각형 (https://programmers.co.kr/learn/courses/30/lessons/62048)

# 문제 설명
# 가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다. 종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며,
# 모든 격자칸은 1cm x 1cm 크기입니다. 이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데,
# 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다. 그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다.
# 새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.
# 가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.

# 제한사항
# W, H : 1억 이하의 자연수

# 입출력 예
# W	H	result
# 8	12	80

# 입출력 예 설명
# 입출력 예 #1
# 가로가 8, 세로가 12인 직사각형을 대각선 방향으로 자르면 총 16개 정사각형을 사용할 수 없게 됩니다. 원래 직사각형에서는 96개의 정사각형을 만들 수 있었으므로, 96 - 16 = 80 을 반환합니다.

def solution(w, h): 
    if w == 1 or h == 1:                                # 가로, 세로길이 중 단 하나라도 1이면 반드시 대각선에 의해 반으로 잘림
        answer = 0
    elif w == h:                                        # 정사각형일때는 대각선이 매번 꼭지점을 지나기 때문에 변의 길이만큼 잘리게 됨
        answer = w * h - w
    else:
        b = max(w, h); s = min(w, h)                    # 큰 수에서 작은 수를 나누기 위해 미리 판별
        gcd = Euclidean_Algorithm(b, s)                 # 유클리드 호제법을 이용하여 최대공약수를 찾아낸다 (제한사항의 숫자가 너무 커서 이 방법으로 찾는 것이 빠름)
        answer = (w*h)-(((w//gcd)+(h//gcd)-1)*gcd)      # 대각선이 꼭지점을 찍는 최초의 위치(= 패턴 최소단위)를 찾아 최소공배수만큼 곱해준다
    return answer                                       # (그림을 통한 설명 영상: https://youtu.be/LZ94TH5L--8)

def Euclidean_Algorithm(a, b):                          # 유클리드 호제법 / 알고리즘 (강의영상: https://youtu.be/J5Yl2kHPAY4)
    gcd = a % b                                         # 큰 수를 작은 수로 나눈다
    if gcd == 0:                                        # 나머지가 0이면 작은 수는 최소공배수
        gcd = b
        return gcd
    return Euclidean_Algorithm(b, gcd)                  # 0이 아니면 작은 수와 나머지를 한번 더 나누어본다.

w, h = map(int, input('w와 h 입력: ').split())
print(solution(w, h))