# 백준 : 회의실 배정(그리디 알고리즘) https://www.acmicpc.net/problem/1931

# 문제
# 한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 
# 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자.
# 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다.
# 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.

# 입력
# 첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다.
# 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다.
# 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.

# 출력
# 첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.

# 예제 입력 1  -> 출력 4 [(1,4), (5,7), (8,11), (12,14) 를 이용할 수 있다.]
# 11
# 1 4
# 3 5
# 0 6
# 5 7
# 3 8
# 5 9
# 6 10
# 8 11
# 8 12
# 2 13
# 12 14

case_num = int(input())                         # 회의의 수
times = []                                      # 시간대를 저장할 리스트 선언

for _ in range(case_num):
    start, end = map(int, input().split())      # 시작시간 start, 종료시간 end 순서대로 입력
    times.append([start, end])                  # append로 리스트에 덧붙이기

times.sort(key=lambda x : x[0])                 # 시작시간으로 정렬(sort: 대상 자체를 정렬)
times = sorted(times, key=lambda x : x[1])      # 종료시간으로 정렬(sorted: 대상을 정렬한 리스트 하나 만듬)

cnt = 0                                         # 가능 시간대 횟수
end_temp = 0                                    # end시간을 기억해줄 임시변수

for start, end in times:                        # times의 start와 end를 그대로 받음
    if start >= end_temp:                       # 시작 시간대와 끝나는 시간을 비교 (시작시간이 끝난시간 이후라면 진행이 가능하므로)
        end_temp = end                          # 횟수 증가
        cnt += 1

print(cnt)