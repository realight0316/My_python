# 백준 : 미로탐색 (https://www.acmicpc.net/problem/2178)

# 문제
# N×M크기의 배열로 표현되는 미로가 있다.

# 1	0	1	1	1	1
# 1	0	1	0	1	0
# 1	0	1	0	1	1
# 1	1	1	0	1	1
# 미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, 
# (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 
# 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

# 위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

# 입력
# 첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

# 출력
# 첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

# 예제 입력 -> 15
# 4 6
# 101111
# 101010
# 101011
# 111011

from collections import deque

N, M = map(int, input().split())        # N세로(y), M가로(x) 길이 입력, 리스트 구성시 헷갈림 주의
maze = list()                           # 미로 리스트 구성
for _ in range(N):
    temp = list(map(int, input()))
    maze.append(temp)

x = M -1                                # 최종 좌표를 위해 N과 M에 -1
y = N -1
moving1 = (-1, 1, 0, 0) #y              # 상하좌우
moving2 = ( 0, 0,-1, 1) #x

queue = deque([[0, 0]])                 # 시작지점 (0, 0)

while queue:                            # BFS 이용
    i, j = map(int, queue.popleft())    # 큐에 들어간 좌표 빼내기
    if i == y and j == x:               # 목표 좌표에 도달시 단계출력
        print(maze[i][j])
        break

    for num in range(4):
        nx = j + moving2[num]           # 상하좌우 돌아가면서 탐색
        ny = i + moving1[num]

        # 따로 방문확인 리스트를 만들지 않고 기존 미로 리스트에 이동 단계를 기입해서 진행했음

        if 0 <= nx < M and 0 <= ny < N: # 미로 리스트안에 존재하는 좌표만 진행
            if maze[ny][nx] == 1:       # 길이 나있으면 실행
                maze[ny][nx] = maze[i][j] + 1
                                        # 미로 자체에 이 칸이 몇번째 이동인지 기입했음
                queue.append([ny, nx])  # 다음 칸을 위해 큐에 삽입

for ha in maze:                         # 미로 모양이 궁금해서 출력해봤음, 백준 정답에는 미포함
    print(ha)                           # 출발지점인 (0, 0)은 첫번째 방문이라서 1로 처리되다보니
                                        # 재방문되는 경우가 있었음, 해당 문제에선 답안에 영향없음
